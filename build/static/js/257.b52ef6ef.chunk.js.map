{"version":3,"file":"static/js/257.b52ef6ef.chunk.js","mappings":"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","sources":["UIElements/Card.js","pages/Auth.js"],"sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from \"react\";\nimport Input from \"../FormElements/Input\";\nimport Button from \"../FormElements/Button\";\nimport { useForm } from \"../util/form-hook\";\nimport ErrorModal from \"../UIElements/ErrorModal\";\nimport LoadingSpinner from \"../UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../util/http-hook\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../util/validator\";\nimport Card from \"../UIElements/Card\";\nimport { AuthContext } from \"../util/auth-context\";\n\nimport \"./Auth.css\";\nimport { useNavigate } from \"react-router\";\nimport Footer from \"../components/Footer\";\nimport Navbar from \"../components/Navbar\";\n\nexport default function Auth() {\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  let navigate = useNavigate();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  console.log(formState.isValid);\n\n  async function authSubmitHandler(event) {\n    event.preventDefault();\n\n    console.log(formState.inputs);\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            \"Content-Type\": \"application/json\",\n          }\n        );\n        auth.login(responseData.userId, responseData.token);\n        navigate(`/articles`, { replace: true });\n      } catch (err) {}\n    } else {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n          \"POST\",\n          JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            \"Content-Type\": \"application/json\",\n          }\n        );\n        navigate(`/articles`, { replace: true });\n        auth.login(responseData.userId, responseData.token);\n      } catch (err) {}\n    }\n  }\n\n  function switchModeHandler() {\n    if (!isLoginMode) {\n      setFormData(\n        { ...formState.inputs, name: undefined },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  }\n\n  return (\n    <>\n      <Navbar />\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>{isLoginMode ? \"Login\" : \"Sign Up\"}</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Username\"\n              onInput={inputHandler}\n              errorText=\"Please enter a valid username\"\n              validators={[VALIDATOR_REQUIRE()]}\n            />\n          )}\n          <Input\n            id=\"email\"\n            type=\"email\"\n            element=\"input\"\n            label=\"Email\"\n            onInput={inputHandler}\n            errorText=\"Please enter a valid email\"\n            validators={[VALIDATOR_REQUIRE(), VALIDATOR_EMAIL()]}\n          />\n          <Input\n            id=\"password\"\n            type=\"password\"\n            element=\"input\"\n            label=\"Password\"\n            onInput={inputHandler}\n            errorText=\"Password must be at least 6 characters in length\"\n            validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(6)]}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"LOGIN\" : \"SIGN UP\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          {isLoginMode\n            ? \"Not a member? Create an account\"\n            : \"Already a member? Login\"}\n        </Button>\n      </Card>\n      <Footer />\n    </>\n  );\n}\n"],"names":["props","className","style","children","Auth","useState","isLoginMode","setIsLoginMode","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","navigate","useNavigate","useForm","email","value","isValid","password","formState","inputHandler","setFormData","event","preventDefault","console","log","inputs","process","REACT_APP_BACKEND_URL","JSON","stringify","responseData","login","userId","token","replace","name","Navbar","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","element","id","type","label","onInput","errorText","validators","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","Button","disabled","inverse","onClick","undefined","prevMode","Footer"],"sourceRoot":""}